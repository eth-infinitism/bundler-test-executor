# docker-compose to bring up a single bundler, with all needed services

services:

  funder:
    build: ./runbundler/funder
    environment:
      - FUND=$FUND 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
      - ETH_RPC_URL=$ETH_RPC_URL
      - ENTRYPOINT=$ENTRYPOINT
      - VERBOSE=$VERBOSE
    restart: on-failure:3
    depends_on:
      eth-node:
        condition: service_started

  deployer:
    image: accountabstraction/deployer:0.6
    # build: ./deployer
    environment:
      - ETH_RPC_URL=$ETH_RPC_URL
      - ENTRYPOINT=$ENTRYPOINT
      - VERBOSE=$VERBOSE
    depends_on:
      funder:
        condition: service_completed_successfully

  #launch shared node.
  eth-node:
    extends:
      file: $ETH_NODE_YML
      service: eth-node 

  bundler: 
    extends:
      file: $BUNDLER_YML
      service: bundler
    depends_on:
      deployer:
        condition: service_completed_successfully

  bundler-verify:
    extends:
      file: $BUNDLER_YML
      service: bundler-verify
    
  bundler-waiter:
    image: curlimages/curl
    command: "/waitForBundler $BUNDLER_URL"
    volumes:
      - ./runbundler/waiter/waitForBundler:/waitForBundler
    depends_on:
      deployer:
        condition: service_completed_successfully

  bundler2: 
    extends:
      file: $BUNDLER2_YML
      service: bundler
    depends_on:
      deployer:
        condition: service_completed_successfully

  bundler-waiter2:
    image: curlimages/curl
    command: "/waitForBundler $BUNDLER2_URL"
    volumes:
      - ./runbundler/waiter/waitForBundler:/waitForBundler
    depends_on:
      deployer:
        condition: service_completed_successfully

  wait-all:
    image: ghcr.io/foundry-rs/foundry:latest
    command: echo started
    depends_on:
      bundler:
        condition: service_started
      bundler2:
        condition: service_started
      bundler-waiter:
        condition: service_completed_successfully
      bundler-waiter2:
        condition: service_completed_successfully

networks:
  #the network where BUNDLER_IP and BUNDLER2_IP reside
  p2p:
    ipam:
      config:
        - subnet: "$P2P_SUBNET"

  #todo: incomplete..
  # runtest:
  #   build: ./runtest
  #   #    command: $RUNTEST
  #   environment:
  #     - TEST=pdm run pytest --tb=short -rA -W ignore::DeprecationWarning --url $BUNDLER_URL --entry-point $ENTRYPOINT --ethereum-node $ETH_RPC_URL
  #     - ETH_RPC_URL=$ETH_RPC_URL
  #     - ENTRYPOINT=$ENTRYPOINT
  #     - BUNDLER_URL=$BUNDLER_URL
  #   depends_on:
  #     wait-all:
  #       condition: service_completed_successfully

